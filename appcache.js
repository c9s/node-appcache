// Generated by CoffeeScript 1.4.0
(function() {
  var AppCache, fs, glob, wrench;

  fs = require("fs");

  glob = require("glob");

  wrench = require("wrench");

  AppCache = (function() {

    AppCache.prototype.meta = {};

    AppCache.prototype.cacheList = [];

    AppCache.prototype.networkList = [];

    AppCache.prototype.fallbackList = [];

    AppCache.prototype.configures = {};

    AppCache.prototype.options = {};

    function AppCache(cacheFile, options) {
      var _ref;
      this.cacheFile = cacheFile;
      this.options = options;
      if ((_ref = this.cacheFile) == null)  
        this.cacheFile = ".appcache";
      this.meta = this.readMeta();
      this.bump();
      if (this.options.debug)  
        console.info("AppCache Manifest Version: v" + this.meta.version);
      this.writeMeta(this.meta);
    }

    AppCache.prototype.writeMeta = function(meta) {
      return fs.writeFileSync(this.cacheFile, JSON.stringify(meta), "utf8");
    };

    AppCache.prototype.readMeta = function() {
      if (fs.existsSync(this.cacheFile)) {
        return JSON.parse(fs.readFileSync(this.cacheFile, "utf8")); 
      } else {
        return {
          version: 0.01
        };
      }
    };

    AppCache.prototype.bump = function() {
      return this.meta.version = (Math.ceil(parseFloat(this.meta.version) * 100) / 100) + 0.01;
    };

    AppCache.prototype.configure = function(mode, cb) {
      this.configures[mode] = cb;
      return this;
    };

    AppCache.prototype.version = function(version) {
      if (version) {
        this.meta.version = version;
        return this; 
      }
      return this.meta.version;
    };

    AppCache.prototype.network = function(line) {
      this.networkList.push(line);
      return this;
    };

    AppCache.prototype.cache = function(line) {
      var a, _i, _len;
      if (line instanceof Array) {
        for (_i = 0, _len = line.length; _i < _len; _i++) {
          a = line[_i];
          this.cacheList.push(a);
        } 
      } else {
        this.cacheList.push(line);
      }
      return this;
    };

    AppCache.prototype.fallback = function(line) {
      this.fallbackList.push(line);
      return this;
    };

    AppCache.prototype.clear = function() {
      this.fallbackList = this.networkList = this.cacheList = [];
      return this;
    };

    AppCache.prototype.writeFile = function(file, encoding, cb) {
      return fs.writeFile(file, this.write(), encoding, cb);
    };

    AppCache.prototype.writeFileSync = function(file, encoding) {
      return fs.writeFileSync(file, this.write(), encoding);
    };

    AppCache.prototype.write = function() {
      var mode, output, _ref, _ref1;
      mode = ((_ref = this.options) != null ? _ref.mode : void 0) || "development";
      if ((_ref1 = this.configures[mode]) != null)  
        _ref1.call(this);
      if (mode === "development" && !this.configures[mode] && !this.cacheList.length && !this.networkList.length) {
        output = "CACHE MANIFEST\n";
        output += "# Version " + this.meta.version + "\n";
        output += "NETWORK:\n";
        output += "*";
        return output; 
      } else {
        output = "CACHE MANIFEST\n";
        output += "# v" + this.meta.version + "\n";
        if (this.cacheList.length)  
          output += "CACHE:\n" + this._expandList('cacheList').join("\n");
        if (this.networkList.length)  
          output += "NETWORK:\n" + this.networkList.join("\n");
        if (this.fallbackList.length)  
          output += "FALLBACK:\n" + this.fallbackList.join("\n");
      }
      return output;
    };

    AppCache.prototype._expandPath = function(path) {
      var stats;
      if (typeof path === "string" && path.match(/\*/))  
        return glob.sync(path);
      stats = fs.statSync(path);
      if (stats.isDirectory()) {
        return wrench.readdirSyncRecursive(path); 
      } else {
        return [path];
      }
    };

    AppCache.prototype._expandList = function(listname) {
      var item, newlist, path, _i, _j, _k, _len, _len1, _len2, _ref;
      newlist = [];
      item = this[listname];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        item = list[_i];
        _ref = this._expandPath(item);
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          path = _ref[_j];
          newlist.push(path);
        }
      }
      if (this.options.debug) {
        console.log(listname);
        for (_k = 0, _len2 = newlist.length; _k < _len2; _k++) {
          item = newlist[_k];
          console.log("- " + item + " ");
        } 
      }
      return newlist;
    };

    AppCache.prototype.route = function() {
      var cached, self;
      self = this;
      cached = "";
      return function(req, res) {
        res.writeHead(200, {
          "Content-Type": "text/cache-manifest; chartset=UTF-8"
        });
        if (self.options.cache) {
          if (!cached)  
            cached = self.write();
          res.write(cached); 
        } else {
          res.write(self.write());
        }
        return res.end();
      };
    };

    return AppCache;

  })();

  module.exports = AppCache;

}).call(this);
